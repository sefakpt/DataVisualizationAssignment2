# -*- coding: utf-8 -*-
"""ProjectAssignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1G5hSvyqTWXNnGI6SWuJS4ta_ZWEi5NPj
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('/content/E-commerce Website Logs.csv', on_bad_lines='skip')

df.head()

# Check for missing values and data types
missing_values = df.isnull().sum()
data_types = df.dtypes

# Check unique values in each column to detect anomalies or inconsistencies
unique_values_summary = df.nunique()

# View sample values from 'age' and 'returned' to evaluate cleaning needs
age_sample = df['age'].unique()
returned_sample = df['returned'].unique()

missing_values, data_types, unique_values_summary, age_sample, returned_sample

# Remove rows with missing or invalid age and 'Normal' in age column
df_cleaned = df[~df['age'].isin(['--', 'Normal'])]
df_cleaned = df_cleaned.dropna(subset=['age'])

# Convert 'age' to integer
df_cleaned['age'] = df_cleaned['age'].astype(int)

# Convert 'accessed_date' to datetime
df_cleaned['accessed_date'] = pd.to_datetime(df_cleaned['accessed_date'], errors='coerce')

# Remove rows with invalid dates
df_cleaned = df_cleaned.dropna(subset=['accessed_date'])

# The 'sales' and 'bytes' columns also seem to have mixed types.
# Convert 'sales' and 'bytes' to numeric, coercing errors
df_cleaned['sales'] = pd.to_numeric(df_cleaned['sales'], errors='coerce')
df_cleaned['bytes'] = pd.to_numeric(df_cleaned['bytes'], errors='coerce')

# Remove rows where 'sales' or 'bytes' could not be converted to numeric
df_cleaned = df_cleaned.dropna(subset=['sales', 'bytes'])


# Create new calculated fields
df_cleaned['net_sales'] = df_cleaned['sales'] - df_cleaned['returned_amount']
df_cleaned['is_converted'] = df_cleaned['sales'].apply(lambda x: 1 if x > 0 else 0)
# Fix for 'returned' column: Ensure it is treated as string before comparison
df_cleaned['is_returned'] = df_cleaned['returned'].astype(str).apply(lambda x: 1 if x == 'Yes' else 0)

# Save the cleaned dataset to CSV for Tableau import
# cleaned_file_path = "/mnt/data/cleaned_ecommerce_logs.csv" # This path is for Colab Enterprise and won't work in standard Colab
# Using a standard /content path for saving in Colab
cleaned_file_path = "/content/cleaned_ecommerce_logs.csv"
df_cleaned.to_csv(cleaned_file_path, index=False)

# Show cleaned dataset shape and new columns
df_cleaned.shape, df_cleaned[['age', 'accessed_date', 'net_sales', 'is_converted', 'is_returned']].head()